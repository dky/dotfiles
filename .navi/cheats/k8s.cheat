% kubectl

# watch kubectl get nodes
watch -n 2 "kubectl get nodes -L nodegroup"

# k8s api aws readyz/verbose
kubectl get --raw='/readyz?verbose'

# version
kubectl version

# Get component status
kubectl get componentstatuses

# Print all contexts
kubectl config get-contexts

# Print current context of kubeconfig
kubectl config current-context

# ksc - Set context of kubeconfig
kubectl config use-context <context_name>

# Print resource documentation
kubectl explain <resource>

# Get all resources in namespace
kubectl get all -n <namespace>

# Get volume claims
kubectl get pvc -o wide

# Get secrets
kubectl get secrets

# Get nodes
kubectl get nodes --sort-by=.metadata.creationTimestamp

# Get nodes with labels
kubectl get nodes --show-labels

# Get nodes wide
kubectl get nodes -o wide

# Get namespaces
kubectl get namespaces

# ksn - kubectl set namespace
kubectl config set-context --current --namespace <namespaces>

# Get pods from namespace (add option '-o wide' for details)
kubectl get pods -n <namespace>

# Get running|completed pods
kubectl get pods --all-namespaces -o wide | egrep -v 'Running|Completed'

# kgp - Get pods
kubectl get pods

# kgpw - Get pods watch
kubectl get pods --watch

# kgpa - Get pods from all namespace (add option '-o wide' for details)
kubectl get pods --all-namespaces

# Get replicaset
kubectl get replicaset

# Get services from namespace
kubectl get services -n <namespace>

# Get endpoints
kubectl get ep

# Get deployments
kubectl get deployments -n <namespace>

# List containers in a pod
kubectl get pods <pod_name> -o jsonpath='{.spec.containers[*].name}{"\n"}'

# k auth can i
kubectl auth can-i <verb> <resource> <optional-resourcename>

# Get role bindings
kubectl get rolebinding -n <namespace>

# Get rolebindings/cluster rolebinding all
kubectl get rolebinding,clusterrolebinding --all-namespaces

# Get rbac def
kubectl get RBACDefinition

# Get node info
kubectl describe node <node>

# Get namespace info
kubectl describe ns <namespace>

# Get details from pod
kubectl describe po <pod_name>

# Get details for sa
kubectl describe sa <sa>

# Print logs from pod
kubectl logs -f <pod_name>

# Delete service
kubectl delete svc <name>

# Create deployment from spec file
kubectl apply -f <spec>

# Delete deployment from spec file
kubectl delete -f <spec>

# Delete deployment using name
kubectl delete deployment <name>

# Delete a pod
kubectl delete pod <pod_name>

# Delete all pods within namespace
kubectl delete --all-pods --namespace=<namespace>

# Edit deployments
kubectl edit deployment/<name> -n <namespace>

# Drain node in preparation for maintenance
kubectl drain <name>

# Mark node as schedulable
kubectl uncordon <name>

# Mark node as unschedulable
kubectl cordon <name>

# Display resource (cpu/memory/storage) usage
kubectl top <type>

# Get config maps
kubectl get configmap

# Configuration maps literal
kubectl create configmap <configmap-name> --from-literal=<key>=<value>

# Configuration map from file
kubectl create configmap <configmap-name> --from-file=<path-to-file>

# Run a pod interactively for debugging
kubectl run -i --tty --rm test --image=busybox --restart=Never -- sh

# Cluster info
kubectl cluster-info

# Pod container port
kubectl get pod <pod_name> --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}'

# Get pod_name so we can pipe into log and other commands.
$ pod_name: kubectl get pods --no-headers -o custom-columns=":metadata.name"
$ context_name: kubectl config get-contexts --output=name
$ namespaces:  kubectl get ns  --no-headers -o custom-columns=":metadata.name"

# Export kube config - Talk to remote clusters by exporting KUBECONFIG env
export KUBECONFIG=<config>

% microk8s

# Micro k8s inspect
microk8s.inspect

# Micro k8s status
microk8s.status

# Micro k8s enable
microk8s.enable

# Micro k8s stop
microk8s.stop

# Micro k8s start
microk8s.start

% helm

# hl - helm list
helm list

# hd - helm delete
helm delete <helm_chart_list>

# helm upgrade
helm upgrade --install <chart_name> <chart_path>

# helm install
helm install <chart_name> <chart_path>

$ helm_chart_list: helm list --short

% kind

# kind cluster create
kind create cluster

% k9s

# k9s headless
k9s --headless
