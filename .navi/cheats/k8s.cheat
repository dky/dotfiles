% kubectl

# Debug node generic
kubectl debug node/<node> -it --image=centos

# Sort nodes by age
kubectl get nodes --sort-by=.metadata.creationTimestamp

# Watch nodes
watch -n 2 "kubectl get nodes -L nodegroup --sort-by=.metadata.creationTimestamp"

# Get get nodegroups
kubectl get nodes -L nodegroup

# Get node labels
kubectl get nodes --show-labels

# Get nodes wide
kubectl get nodes -o wide

# Uncordon node
kubectl uncordon <nodes>

# Cordon node
kubectl cordon <nodes>

# Drain node ignore daemonset
kubectl drain <nodes> --ignore-daemonsets

# Describe node
kubectl describe node <nodes>

$ nodes:  kubectl get nodes --no-headers -o custom-columns=":metadata.name"

# Scale karpenter controller
kubectl scale deployment karpenter --replicas=1 -n kube-system

# Scale gatekeeper controller-manager
kubectl scale deployment gatekeeper-controller-manager --replicas=1 -n kube-system

# Get autoscaler logs
kubectl logs -f -n kube-system -l app.kubernetes.io/name=aws-cluster-autoscaler | egrep -v "failed to acquire lease|lock is held by cluster*"

# Scale deployment
kubectl scale deployment <name> --replicas=<count>

# karpenter logs
kubectl logs -f -n kube-system -l app.kubernetes.io/name=karpenter

# Get kube-system versions
kubectl get deployment,daemonset,statefulsets -o=jsonpath="{range .items[*]}{'\n'}{.metadata.name}{':\t'}{range .spec.template.spec.containers[*]}{.image}{', '}{end}{end}" -n kube-system

# Get all resources in namespace
kubectl -n <namespace> get $(kubectl api-resources --namespaced=true --no-headers -o name | egrep -v 'events|nodes' | paste -s -d, - ) --no-headers

# Get httpproxies
kubectl get HTTPProxies

# Contour endpoints
kubectl get endpoints

# port-forward - leave local port empty for ephemeral
kubectl port-forward svc/<services> :<service-pod-port>

$ services:  kubectl get services --no-headers -o custom-columns=":metadata.name"

# port-forward hubble
kubectl port-forward svc/hubble-ui :80 -n kube-system

# k8s api aws readyz/verbose
kubectl get --raw='/readyz?verbose'

# version
kubectl version

# Get component status
kubectl get componentstatuses

# Print all contexts
kubectl config get-contexts

# Print current context of kubeconfig
kubectl config current-context

# Set context of kubeconfig
kubectl config use-context <context_name>

# Print resource documentation
kubectl explain <resource>

# Get volume claims
kubectl get pvc -o wide

# Get secrets
kubectl get secrets

# kubectl create secret tls
kubectl create secret tls <secret_name> --key <key_file> --cert <cert_file>

# Describe quotas for namespace
kubectl describe resourcequota namespace-quotas

# Describe namespace
kubectl describe ns <namespaces>

# Get namespaces
kubectl get namespaces

# Get pods from all namespace (add option '-o wide' for details)
kubectl get pods --all-namespaces

# Set namespace
kubectl config set-context --current --namespace <namespaces>

# Get pods kube-system
kubectl get pods -n kube-system

# Get pods from namespace (add option '-o wide' for details)
kubectl get pods -n <namespace>

# Get running|completed pods
kubectl get pods --all-namespaces -o wide | egrep -v 'Running|Completed'

# Get logs pod
kubectl logs -f --tail=100 <pod_name>

# Get logs container in pod
kubectl logs -c <container> <pod_name>

# Get events
kubectl get events

# Get events watch
kubectl get events -w

# debug pod interactive
kubectl run -i --tty --rm temp-debug-pod --image=<image> --restart=Never -- sh

# Watch pods
watch -n 2 "kubectl get pods"

# Get pods
kubectl get pods

# Get pods wide
kubectl get pods -o wide

# Get pods watch
kubectl get pods --watch

# List containers in a pod
kubectl get pods <pod_name> -o jsonpath='{.spec.containers[*].name}{"\n"}'

# Describe pod
kubectl describe po <pod_name>

# Delete pod
kubectl delete pod <pod_name>

# Delete all pods from namespace
kubectl delete --all-pods --namespace=<namespace>

# Get pod container port
kubectl get pod <pod_name> --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}'

$ pod_name: kubectl get pods --no-headers -o custom-columns=":metadata.name"

# Get replicaset
kubectl get replicaset

# Get services from namespace
kubectl get services -n <namespace>

# Get endpoints
kubectl get ep

# Get deployments
kubectl get deployments -n <namespace>

# auth can-i
kubectl auth can-i <verb> <resource> <optional-resourcename>

# Get role bindings
kubectl get rolebinding -n <namespace>

# Get rolebindings/cluster rolebinding all
kubectl get rolebinding,clusterrolebinding --all-namespaces

# Get rbac def
kubectl get RBACDefinition

# Get details for sa
kubectl describe sa <sa>

# Delete service
kubectl delete svc <name>

# Create deployment from spec file
kubectl apply -f <spec>

# Delete deployment from spec file
kubectl delete -f <spec>

# Delete deployment using name
kubectl delete deployment <name>

# Edit deployments
kubectl edit deployment/<name> -n <namespace>

# Display resource (cpu/memory/storage) usage
kubectl top <type>

# Get configmaps
kubectl get configmap

# Configuration maps literal
kubectl create configmap <configmap-name> --from-literal=<key>=<value>

# Configuration map from file
kubectl create configmap <configmap-name> --from-file=<path-to-file>

# Cluster info
kubectl cluster-info

$ context_name: kubectl config get-contexts --output=name
$ namespaces:  kubectl get ns --no-headers -o custom-columns=":metadata.name"

# Export kubeconfig - Talk to remote clusters by exporting KUBECONFIG env
export KUBECONFIG=<config>

% microk8s

# Micro k8s inspect
microk8s.inspect

# Micro k8s status
microk8s.status

# Micro k8s enable
microk8s.enable

# Micro k8s stop
microk8s.stop

# Micro k8s start
microk8s.start

% helm

# hl - helm list
helm list

# hd - helm delete
helm delete <helm_chart_list>

# helm upgrade
helm upgrade --install <chart_name> <chart_path>

# helm install
helm install <chart_name> <chart_path>

$ helm_chart_list: helm list --short

% kind

# kind cluster create
kind create cluster

% k9s

# k9s headless
k9s --headless

% cert-manager
# kubectl get clusterissuers
kubectl get clusterissuers

# kubectl get certmanager logs
kubectl logs -f -n cert-manager -l app.kubernetes.io/instance=cert-manager

# kubectl describe vault clusterissuer
kubectl describe clusterissuers vault-cluster-issuer

# kubectl decode base64 secret
kubectl get secret <secret-name> -o json | jq '.data | map_values(@base64d)'
