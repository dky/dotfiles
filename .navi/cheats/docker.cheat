% docker

# Remove an image
docker image rm <image_id>

# Clean none/dangling images
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

# Force clean none/dangling images
docker rmi $(docker images --filter "dangling=true" -q --no-trunc) -f

# Build an image from the Dockerfile in the current directory and tag the image
docker build -t <image>:<version> .

# Stop a running container through SIGTERM
docker stop <container_id>

# Stop a running container through SIGKILL
docker kill <container_id>

# List the networks
docker network ls

# Delete all running and stopped containers
docker rm -f $(docker ps -aq)

# Create a new bash process inside the container and connect it to the terminal
docker exec -it <container_id> bash

# Print the last lines of a container's logs
docker logs --tail 100 <container_id> | less

# Print the last lines of a container's logs and following its logs
docker logs --tail 100 <container_id> -f

# Create new network
docker network create <network_name>

% docker-compose

# Builds, (re)creates, starts, and dettaches to containers for a service
docker-compose up -d <service_name>

# Print the last lines of a serviceâ€™s logs
docker-compose logs --tail 100 <service_name> | less

# Print the last lines of a service's logs and following its logs
docker-compose logs -f --tail 100 <service_name>

# Remove exited or created images
docker rm $(docker ps -a -f status=exited -f status=created -q)

# Docker run and rm
docker run -it --rm <image> /bin/sh

$ image_id: docker images --- --headers 1 --column 3
$ container_id: docker ps --- --headers 1 --column 1
