function color_my_prompt {
	local __user="\[\033[1;37m\]\u"
	local __asterisk="\[\033[0;36m\]@"
	local __host="\[\033[0;31m\]\h"
	local __cur_location="\[\033[01;34m\]\w"
	local __git_branch_color="\[\033[31m\]"
	local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
	local __prompt_tail="\[\033[35m\]$"
	local __last_color="\[\033[00m\]"
	export PS1="$__user$__asterisk$__host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}

function pmin {
	local __cur_location="\[\033[01;34m\]\w"
	local __git_branch_color="\[\033[31m\]"
	local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
	local __prompt_tail="\[\033[35m\]$"
	local __last_color="\[\033[00m\]"
	export PS1="ðŸ‘½ $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}

color_my_prompt

#docker functions
function dkr {
	name="$1"
	image="$2"
	docker run -it --name $name -h $name $image /bin/bash;
}

function dki {
	docker inspect $1 | less
}

function dkrmce {
	for i in `docker ps -a | grep "Exited" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmcc {
	for i in `docker ps -a | grep "Created" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmin {
	for i in `docker images | grep "^<none>" | awk '{ print $3 }' | grep -v IMAGE`; do docker rmi $i; done
}

function dkip {
	docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $1
}

function dkesh {
	docker exec -it $1 /bin/sh
}

function rl() {
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike $1
}

function sshn {
	echo "Usage: sshnokey host port"
	sshhost=$1
	sshport=$2

	if [ -n "$sshport" ]; then
		echo "sshport not empty"
	else
		echo "ssh port empty using default"
		sshport=22
	fi

	echo "Connecting to $sshhost on port: $sshport"
	ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $sshhost -p $sshport
}

function sshf {
	host=$1
	ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$host"
}

function hnp {
	post_id=$1
	hugo new post/$post_id
}

function lb() {
	nvim ~/logbook/$(date '+%Y-%m-%d').md
}

# FZF to switch Tmux sessions:
function fs() {
	local -r fmt='#{session_id}:|#S|(#{session_attached} attached)'
		{ tmux display-message -p -F "$fmt" && tmux list-sessions -F "$fmt"; } \
			| awk '!seen[$1]++' \
			| column -t -s'|' \
			| fzf -q '$' --reverse --prompt 'switch session: ' -1 \
			| cut -d':' -f1 \
			| xargs tmux switch-client -t
		}

# FZF to switch Tmux panes:
function fp() {
	local panes current_window current_pane target target_window target_pane
	panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
	current_pane=$(tmux display-message -p '#I:#P')
	current_window=$(tmux display-message -p '#I')

	target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return
	target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
	target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

	if [[ $current_window -eq $target_window ]]; then
		tmux select-pane -t ${target_window}.${target_pane}
	else
		tmux select-pane -t ${target_window}.${target_pane} &&
		tmux select-window -t $target_window
	fi
}

function gignore() {
	tee .gitignore <<EOF
main

*.swp
EOF
}

function gitpc() {
	GIT_HOOKS="./.git/hooks"
	if [ -d $GIT_HOOKS ]; then
		echo "./git/hooks exists, creating post-commit script"
		cat > $GIT_HOOKS/post-commit << EOF
#!/bin/sh

git push origin master >/dev/null 2>&1 &
EOF
chmod u+x $GIT_HOOKS/post-commit
else
	echo "Git hooks dir doesn't exist"
	fi
}

function up {
	unset HTTP_PROXY HTTPS_PROXY https_proxy http_proxy
}

function setproxy() {
	proxy=$1
	export http_proxy=http://$proxy:3128 && export https_proxy=http://$proxy:3128
	export HTTP_PROXY=http://$proxy:3128 && export HTTPS_PROXY=http://$proxy:3128
}

function mkcd () {
	mkdir "$1"
	cd "$1"
}

# Create a timestamped directory quickly
function mkd () {
	date_today=$(date +%m-%d-%y)
	if [ -d "$date_today" ];
	then
		echo "This dir exists!"
	else
		mkdir $date_today && cd $date_today
	fi
}

# fd - Find any directory and cd to selected directory
fd() {
	cd ~
	local dir
	dir=$(find -L ${1:-.} -path '*/\.*' \
		-o \( -name Music -o -name logbook -o -name Library -o -name Pictures -o -name Public -o -name Movies -o -name Applications -o -name Downloads \) -prune \
		-o \( -name '.git' -o -name 'lib' \) -prune \
		-o \( -path './go/bin/*' -o -path './go/pkg/*' -o -path './.vim/plugged/*' -o -path './.vim/view/*' -o -path './.local/share/nvim/view/*' -o -path './go/src/*' -o -path './iCloud*/*' -o -path './google-cloud-sdk/*' -o -path './tmp/*' -o -path './Documents/*' -o -path './Desktop/*' -o -path './git/dky.io/*' -o -path './git/docker/*' -o -path './git/kinesis-qmk/*' \) -prune \
		-o \( -name '*.mp4' -o -name '*.mp3' -o -name '.DS_Store' -o -name '*.png' -o -name '*.jpg' -o -name '*.jpeg' -o -name '*.gz' -o -name '*.tgz' \) -prune \
		-o -type d \
		-print 2> /dev/null | fzf +m) &&
		cd "$dir"
}

# Pet snippets shortcut for "pet new"
function pta() {
	PREV=$(echo `history | tail -n2 | head -n1` | sed 's/[0-9]* //')
	sh -c "pet new `printf %q "$PREV"`"
}

# Wordnet fzf
# Default `fold` to screen width and break at spaces
function fold {
	if [ $# -eq 0 ]; then
		/usr/bin/fold -w $COLUMNS -s
	else
		/usr/bin/fold $*
	fi
}

# Use `fzf` against system dictionary
function spell {
	cat /usr/share/dict/words | fzf --preview 'wn {} -over | fold' --preview-window=up:60%
}

# Lookup definition of word using `wn $1 -over`.
# If $1 is not provided, we'll use the `spell` command to pick a word.
# brew install wordnet
# brew install fzf
function dic {
	if [ $# -eq 0 ]; then
		wn `spell` -over | fold
	else
		wn $1 -over | fold
	fi
}

function uvenv {
	python3 -m venv venv 
	source venv/bin/activate 
	pip install --upgrade pip setuptools
	mkdir -p app/templates \
		app/bin \
		app/db \
		app/static \
		app/views \
		app/viewmodels \
		app/data \
		app/static/js app/static/css app/static/img

cat << EOF > ./requirements.txt
sqlalchemy
EOF

cat << EOF > ./requirements-dev.txt
-r requirements.txt
pytest
pytest-cov
webtest
flake8
yapf
pynvim
jedi
pylint
EOF

pip install -r ./requirements.txt
pip install -r ./requirements-dev.txt

cat << EOF > app/app.py
import flask


app = flask.Flask(__name__)


@app.route('/')
def index():
    return "Hello World!"


if __name__ == '__main__':
	app.run(debug=True)
EOF
}

function venv {
	python3 -m venv venv
	source venv/bin/activate
	pip install --upgrade pip setuptools
}

function unsetaws {
	unset AWS_SESSION_TOKEN
	unset AWS_ACCESS_KEY_ID
	unset AWS_SECRET_ACCESS_KEY
}

# Git clone and cd into dir immediately after
gccd() {
  git clone "$1" && cd "$(basename "$1" .git)"
}

function dcu() {
	echo Starting: $1
	FILE=$1
	COMPOSE_FILE=${FILE:-docker-compose.yml} 
	docker-compose -f $COMPOSE_FILE up -d
}
function dcr() {
	echo Re-Starting: $1
	FILE=$1
	COMPOSE_FILE=${FILE:-docker-compose.yml} 
	docker-compose -f $COMPOSE_FILE restart
}
function dcs() {
	echo Stopping: $1
	FILE=$1
	COMPOSE_FILE=${FILE:-docker-compose.yml} 
	echo Stopping: $COMPOSE_FILE
	docker-compose -f $COMPOSE_FILE stop
}

function mysqlh() {
	mysql -h $1 -u root -p -P 3306
}

function jfmt() {
	python3 -mjson.tool < $1 > /tmp/$1
	cp /tmp/$1 $1
}
