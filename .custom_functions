function color_my_prompt {
	# set the current working directory as the terminal title
	local __term_title="\[\e]0;\W\a\]"
	local __user="\[\033[1;37m\]\u"
	local __asterisk="\[\033[0;36m\]@"
	local __host="\[\033[0;31m\]\h"
	local __cur_location="\[\033[01;34m\]\w"
	local __git_branch_color="\[\033[31m\]"
	local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
	local __prompt_tail="\[\033[32m\]$"
	local __seperator="\[\033[35m\]-"
	local __date="\[\033[0;32m\]\D{%m-%d-%y}"
	local __time="\[\033[0;33m\]\D{%H:%M:%S}"
	local __open_bracket="\[\033[1;30m\]["
	local __close_bracket="\[\033[1;30m\]]"
	local __last_color="\[\033[00m\]"
	export PS1="$__term_title$__open_bracket$__user$__asterisk$__host $__cur_location $__date$__seperator$__time$__close_bracket$__git_branch_color$__git_branch\n$__prompt_tail$__last_color "
}

function pmin {
	local __cur_location="\[\033[01;34m\]\w"
	local __git_branch_color="\[\033[31m\]"
	local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
	local __prompt_tail="\[\033[35m\]$"
	local __last_color="\[\033[00m\]"
	export PS1="ðŸ‘½ $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}

color_my_prompt

# kubectl functions
function kgp {
	name=$1
	kubectl get pods --namespace=$name;
}

# kubectl exec <pod> -i -t -- /bin/sh
function ke {
	pod=$1
	kubectl exec $pod -i -t -- /bin/sh
}

# kubectl get container pod namespace
function kgcpn {
	pod=$1
	name=$2
	kubectl get pods $pod -o jsonpath='{.spec.containers[*].name}{"\n"}' --namespace=$name;
}

# Some alias fzf greppery
function ag() {
	local alias_cmd
	alias_cmd=$(alias | sed -e "s/^alias //g" -e "s/['\"]//g" | awk -F'=' '{ print $1, "#", $2 }' | fzf)
	bash -i -c $alias_cmd
}

#docker functions
function dkr {
	name="$1"
	image="$2"
	docker run -it --name $name -h $name $image /bin/bash;
}

function dki {
	docker inspect $1 | less
}

function dkrmce {
	for i in `docker ps -a | grep "Exited" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmia {
	docker rmi -f $(docker images -a -q)
}

function dkrmcc {
	for i in `docker ps -a | grep "Created" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmin {
	for i in `docker images | grep "^<none>" | awk '{ print $3 }' | grep -v IMAGE`; do docker rmi $i; done
}

function dkip {
	docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $1
}

function dkesh {
	docker exec -it $1 /bin/sh
}

function rl() {
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike $1
}

function ap() {
	ansible-playbook $1 -v
}

function sshn {
	echo "Usage: sshnokey host port"
	sshhost=$1
	sshport=$2

	if [ -n "$sshport" ]; then
		echo "sshport not empty"
	else
		echo "ssh port empty using default"
		sshport=22
	fi

	echo "Connecting to $sshhost on port: $sshport"
	ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $sshhost -p $sshport
}

function sshf {
	host=$1
	ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$host"
}

function sship {
	ssh $(cat .private_ip.txt)
}

function hnp {
	post_id=$1
	hugo new post/$post_id
}

function lb() {
	nvim ~/logbook/$(date '+%Y-%m-%d').md
}

# Check if we are in a nvim floaterm buffer
if [[ -z "${NVIM}" ]]; then
	_e="nvim"
else
	_e="floaterm"
fi

function dp() {
	$_e content/daily/$(date '+%Y')/$(date '+%m')/$(date '+%Y-%m-%d').md
}

# FZF to switch Tmux sessions:
#
function tmuxSessionSwitch() {
	session=$(tmux list-windows -a | fzf | sed 's/: .*//g')
	tmux switch-client -t "$session"
}

# FZF to switch Tmux panes:
function fp() {
	export FZF_DEFAULT_OPTS=""
	local panes current_window current_pane target target_window target_pane
	panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
	current_pane=$(tmux display-message -p '#I:#P')
	current_window=$(tmux display-message -p '#I')

	target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return
	target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
	target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

	if [[ $current_window -eq $target_window ]]; then
		tmux select-pane -t ${target_window}.${target_pane}
	else
		tmux select-pane -t ${target_window}.${target_pane} &&
			tmux select-window -t $target_window
	fi
}

function gignore() {
	tee .gitignore <<EOF
	main

	*.swp
EOF
}

function gitpc() {
	GIT_HOOKS="./.git/hooks"
	if [ -d $GIT_HOOKS ]; then
		echo "./git/hooks exists, creating post-commit script"
		cat > $GIT_HOOKS/post-commit << EOF
		#!/bin/sh

		git push origin master >/dev/null 2>&1 &
EOF
chmod u+x $GIT_HOOKS/post-commit
else
	echo "Git hooks dir doesn't exist"
	fi
}

function up {
	unset HTTP_PROXY HTTPS_PROXY https_proxy http_proxy
}

function setproxy() {
	proxy=$1
	export http_proxy=http://$proxy:3128 && export https_proxy=http://$proxy:3128
	export HTTP_PROXY=http://$proxy:3128 && export HTTPS_PROXY=http://$proxy:3128
}

function mkcd () {
	mkdir "$1"
	cd "$1"
}

# Create a timestamped directory quickly
function mkd () {
	date_today=$(date +%m-%d-%y)
	if [ -d "$date_today" ];
	then
		echo "This dir exists!"
	else
		mkdir $date_today && cd $date_today
	fi
}

function uvenv {
	python3 -m venv venv 
	source venv/bin/activate 
	pip install --upgrade pip setuptools

	cat << EOF > ./requirements.txt
	sqlalchemy
	fastapi
	uvicorn
EOF

cat << EOF > ./requirements-dev.txt
-r requirements.txt
pytest
flake8
yapf
pynvim
pylint
EOF

pip install -r ./requirements.txt
pip install -r ./requirements-dev.txt

}

function unsetaws {
	unset AWS_SESSION_TOKEN
	unset AWS_ACCESS_KEY_ID
	unset AWS_SECRET_ACCESS_KEY
}

# Git clone and cd into dir immediately after
gccd() {
	git clone "$1" && cd "$(basename "$1" .git)"
}

function dcu() {
	echo Starting: $1
	FILE=$1
	COMPOSE_FILE=${FILE:-docker-compose.yml} 
	docker compose -f $COMPOSE_FILE up -d
}
function dcr() {
	echo Re-Starting: $1
	FILE=$1
	COMPOSE_FILE=${FILE:-docker-compose.yml} 
	docker compose -f $COMPOSE_FILE restart
}
function dcd() {
	echo Stopping: $1
	FILE=$1
	COMPOSE_FILE=${FILE:-docker-compose.yml} 
	echo Stopping: $COMPOSE_FILE
	docker compose -f $COMPOSE_FILE stop
}

function mysqlh() {
	mysql -h $1 -u root -p -P 3306
}

function jfmt() {
	python3 -mjson.tool < $1 > /tmp/$1
	cp /tmp/$1 $1
}

gbf() {
	git for-each-ref --format='%(refname:short)' refs/heads | fzf | xargs git checkout
}

# Git tag and push
function gtp() {
	echo "git tag $1 && git push origin $1"
	git tag $1
	git push origin tag $1
}

# gshow - git commit browser
gshow() {
	local filter
	if [ -n $@ ] && [ -f $@ ]; then
		filter="-- $@"
	fi

	git log \
		--graph --color=always --abbrev=7 --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr' $@ | \
		fzf \
		--ansi --no-sort --reverse --tiebreak=index \
		--preview "f() { set -- \$(echo -- \$@ | grep -o '[a-f0-9]\{7\}'); [ \$# -eq 0 ] || git show --color=always \$1 $filter; }; f {}" \
		--bind "j:down,k:up,alt-j:preview-down,alt-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up,q:abort,ctrl-m:execute:
			(grep -o '[a-f0-9]\{7\}' | head -1 |
				xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
							{}
							FZF-EOF" \
								--preview-window=top:70% \
								--height 100%
							}

							function exd() {
								exercism download --exercise=$1 --track=$2
							}

# Vault tidy
vtidy() {
	echo "Tidying up Vault"
	vault write pki_int/tidy safety_buffer=5s tidy_cert_store=true tidy_revocation_list=true
}

# Credit to https://polothy.github.io/post/2019-08-19-fzf-git-checkout
fzf-git-branch() {
	git rev-parse HEAD > /dev/null 2>&1 || return

	git branch --color=always --all --sort=-committerdate |
		grep -v HEAD |
		fzf --height 50% --ansi --no-multi --preview-window right:65% \
		--preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
		sed "s/.* //"
	}

	fzf-git-branch-checkout() {
		git rev-parse HEAD > /dev/null 2>&1 || return

		local branch

		branch=$(fzf-git-branch)
		if [[ "$branch" = "" ]]; then
			echo "No branch selected."
			return
		fi

	 # If branch name starts with 'remotes/' then it is a remote branch. By
	 # using --track and a remote branch name, it is the same as:
	 # git checkout -b branchName --track origin/branchName
	 if [[ "$branch" = 'remotes/'* ]]; then
		 git checkout --track $branch
	 else
		 git checkout $branch;
	 fi
 }

 en() {
	 # Edit navi cheats
	 echo Editing with: $_e
	 find ~/.dotfiles/.navi/cheats -type f | fzf | xargs $_e
 }

 function vault_seed() {
	 echo $1 > ~/.vault-token
 }

# Git Commit latest changes with a message
function gcml() {
	git add .
	git commit -m "$(echo "Updates for: $(date +%d-%m-%y-%H:%M:%S)")"
	git push origin "$(git symbolic-ref --short HEAD)" --force-with-lease
}

function pd() {
	echo "Pulling dotfiles"
	cd ~/.dotfiles && git pull origin master && source ~/.dotfiles/.custom_aliases && source ~/.dotfiles/.custom_functions && cd -
	if [ -d ~/git/obsidian-dky ]; then
		echo "Obsidian directory exists, pulling updates"
		cd ~/git/obsidian-dky && git pull origin "$(git symbolic-ref --short HEAD)" && cd -
	else
		echo "Obsidian repo directory doesn't exist"
	fi
}

function pu() {
	echo "Pushing dotfiles"
	cd ~/.dotfiles && git push origin master && cd -
	echo "Pushing dotconfig"
	cd ~/.config && git push origin master && cd -
	echo "Pushing dotvim"
	cd ~/.vim && git push origin master && cd -

	if [ -d ~/git/obsidian-dky ]; then
		echo "Obsidian directory exists, pushing updates"
		cd ~/git/obsidian-dky && gcml && git push origin "$(git symbolic-ref --short HEAD)" && cd -
	else
		echo "Obsidian repo directory doesn't exist"
	fi
}
