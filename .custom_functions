function color_my_prompt {
	local __user="\[\033[1;37m\]\u"
		local __asterisk="\[\033[0;36m\]@"
		local __host="\[\033[0;31m\]\h"
		local __cur_location="\[\033[01;34m\]\w"
		local __git_branch_color="\[\033[31m\]"
		local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
		local __prompt_tail="\[\033[35m\]$tail"
		local __last_color="\[\033[00m\]"
		export PS1="$__user$__asterisk$__host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}

function pmin {
	export PS1="ðŸ¤“ "
}

color_my_prompt

#docker functions
function dkr { 
	name="$1" 
	image="$2"
	docker run -it --name $name -h $name $image /bin/bash;
}

function dkrmce {
	for i in `docker ps -a | grep "Exited" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmcc {
	for i in `docker ps -a | grep "Created" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmin {
	for i in `docker images | grep "^<none>" | awk '{ print $3 }' | grep -v IMAGE`; do docker rmi $i; done
}

function dkip {
	docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $1
}

function dkesh {
	docker exec -it $1 /bin/sh
}

function rl() {
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike $1
}

function sshn {
	echo "Usage: sshnokey host port"
		sshhost=$1
		sshport=$2

		if [ -n "$sshport" ]; then
			echo "sshport not empty"
		else
			echo "ssh port empty using default"
				sshport=22
				fi

				echo "Connecting to $sshhost on port: $sshport"
				ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $sshhost -p $sshport
}

function sshf {
	host=$1
	ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$host"
}

function hnp {
	post_id=$1
		hugo new post/$post_id
}

function lb() {
	nvim ~/logbook/$(date '+%Y-%m-%d').md
}

# FZF to switch Tmux sessions:
# bind-key s run "tmux new-window 'bash -ci fs'"
function fs() {
	local -r fmt='#{session_id}:|#S|(#{session_attached} attached)'
	{ tmux display-message -p -F "$fmt" && tmux list-sessions -F "$fmt"; } \
	| awk '!seen[$1]++' \
		| column -t -s'|' \
		| fzf -q '$' --reverse --prompt 'switch session: ' -1 \
		| cut -d':' -f1 \
		| xargs tmux switch-client -t
}

# FZF to switch Tmux panes:
function ftpane() {
	local panes current_window current_pane target target_window target_pane
	panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
	current_pane=$(tmux display-message -p '#I:#P')
	current_window=$(tmux display-message -p '#I')

	target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

	target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
	target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

	if [[ $current_window -eq $target_window ]]; then
		tmux select-pane -t ${target_window}.${target_pane}
	else
		tmux select-pane -t ${target_window}.${target_pane} &&
			tmux select-window -t $target_window
	fi
}

function gignore() {
	tee .gitignore <<EOF
main

*.swp
EOF
}

function gitpc() {
	GIT_HOOKS="./.git/hooks"
	if [ -d $GIT_HOOKS ]; then
		echo "./git/hooks exists, creating post-commit script"
		cat > $GIT_HOOKS/post-commit << EOF
#!/bin/sh

git push origin master >/dev/null 2>&1 &
EOF
chmod u+x $GIT_HOOKS/post-commit
else
	echo "Git hooks dir doesn't exist"
fi
}

function up {
	unset HTTP_PROXY HTTPS_PROXY https_proxy http_proxy
}

function sp() {
	proxy=$1
	export http_proxy=http://$proxy:3128 && export https_proxy=http://$proxy:3128
	export HTTP_PROXY=http://$proxy:3128 && export HTTPS_PROXY=http://$proxy:3128
}

function mkcd () {
	mkdir "$1"
	cd "$1"
}

# Django
function dasp () {
	django-admin startproject "$1" .
}

function pipei () {
	pipenv install django==$1
}

# Create a timestamped directory quickly
function mkd () {
	date_today=$(date +%m-%d-%y)
	if [ -d "$date_today" ];
	then
		echo "This dir exists!"
	else
		mkdir $date_today && cd $date_today
	fi
}

# Pet snippets shortcut for "pet new"
function pta() {
	PREV=$(echo `history | tail -n2 | head -n1` | sed 's/[0-9]* //')
	sh -c "pet new `printf %q "$PREV"`"
}
