function color_my_prompt {
	local __user="\[\033[1;37m\]\u"
		local __asterisk="\[\033[0;36m\]@"
		local __host="\[\033[0;31m\]\h"
		local __cur_location="\[\033[01;34m\]\w"
		local __git_branch_color="\[\033[31m\]"
		local __git_branch='`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'
		local __prompt_tail="\[\033[35m\]$tail"
		local __last_color="\[\033[00m\]"
		export PS1="$__user$__asterisk$__host $__cur_location $__git_branch_color$__git_branch$__prompt_tail$__last_color "
}

color_my_prompt

#docker functions

function dkr { 
	name="$1" 
		image="$2"
		docker run -i -t --name $name -h $name $image /bin/bash;
}

function dkrmce {
	for i in `docker ps -a | grep "Exited" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmcc {
	for i in `docker ps -a | grep "Created" | awk '{ print $1 }'`; do docker rm -f $i; done
}

function dkrmin {
	for i in `docker images | grep "^<none>" | awk '{ print $3 }' | grep -v IMAGE`; do docker rmi $i; done
}

function dkip {
	docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $1
}

function dkesh {
	docker exec -it $1 /bin/sh
}

function sshnokey {
	echo "Usage: sshnokey host port"
		sshhost=$1
		sshport=$2

		if [ -n "$sshport" ]; then
			echo "sshport not empty"
		else
			echo "ssh port empty using default"
				sshport=22
				fi

				echo "Connecting to $sshhost on port: $sshport"
				ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $sshhost -p $sshport
}

function vsd {
	vmname=$1
		echo "looking up $vmname server id"
		server_id=`vultr server list | grep $vmname | awk '{ print $1 }'`
		echo "$server_id being deleted"
		vultr server delete $server_id
}

function vip {
	vmname=$1
		echo "looking up $vmname ip"
		server_ip=`vultr server list | grep $vmname | awk '{ print $3 }'`
		echo "$vmname has $server_ip"
}

function vssh {

	vmname=$1
		echo "looking up $vmname ip"
		server_ip=`vultr server list | grep $vmname | awk '{ print $3 }'`
		echo "$vmname has $server_ip"

		if nc -w 1 $server_ip 22; then
			echo "connect to ${server_ip}:22"
				ssh -o StrictHostKeyChecking=no core@$server_ip
		else
			echo "connect to ${server_ip}:22 failed; exit code from netcat was $?; attempting on ${server_ip}:2222"
				ssh -o StrictHostKeyChecking=no $server_ip -p 2222
				fi
}

function jcurl() {
	curl -s "$@" | json | pygmentize -l json
}

function hnp {
	post_id=$1
		hugo new post/$post_id
}

ssh() {
	if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
		tmux rename-window "$(echo $* | cut -d . -f 1)"
			command ssh "$@"
			tmux set-window-option automatic-rename "on" 1>/dev/null
	else
		command ssh "$@"
			fi
}

#up http://url.example.com:8000 code2.c
up() {
	curl $1 -F "uploadfile=@$2"
}

#dl http://url.example.com:8000 code2.c
dl() {
	curl $1/$2 -o $2
}

function lb() {
	nvim ~/logbook/$(date '+%Y-%m-%d').md
}

# Use FZF to switch Tmux sessions:
# bind-key s run "tmux new-window 'bash -ci fs'"
fs() {
	local -r fmt='#{session_id}:|#S|(#{session_attached} attached)'
	{ tmux display-message -p -F "$fmt" && tmux list-sessions -F "$fmt"; } \
	| awk '!seen[$1]++' \
		| column -t -s'|' \
		| fzf -q '$' --reverse --prompt 'switch session: ' -1 \
		| cut -d':' -f1 \
		| xargs tmux switch-client -t
}

rl() {
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike $1
}

gignore() {
tee .gitignore <<EOF
main

*.swp
EOF
}

crtverify() {
	openssl x509 -in $1 -text | less
}

function pet-select() {
  BUFFER=$(pet search --query "$READLINE_LINE")
  READLINE_LINE=$BUFFER
  READLINE_POINT=${#BUFFER}
}

gitpc() {
GIT_HOOKS="./.git/hooks"
if [ -d $GIT_HOOKS ]; then
	echo "./git/hooks exists, creating post-commit script"
cat > $GIT_HOOKS/post-commit << EOF
#!/bin/sh

git push origin master >/dev/null 2>&1 &
EOF
chmod u+x $GIT_HOOKS/post-commit
else
	echo "Git hooks dir doesn't exist"
fi
}

#https://ddrscott.github.io/blog/2017/fzf-dictionary/
# Default `fold` to screen width and break at spaces
function fold {
  if [ $# -eq 0 ]; then
    /usr/bin/fold -w $COLUMNS -s
  else
    /usr/bin/fold $*
  fi
}

# Use `fzf` against system dictionary
function spell {
  cat /usr/share/dict/words | fzf --preview 'wn {} -over | fold' --preview-window=up:60%
}

function dic {
  if [ $# -eq 0 ]; then
    wn `spell` -over | fold
  else
    wn $1 -over | fold
  fi
}
